# Generated by Django 4.2.7 on 2023-12-10 13:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, null=True, verbose_name='Фамилия')),
                ('father_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Отчество')),
                ('gender', models.CharField(max_length=50, null=True, verbose_name='Гендер')),
                ('phone', models.CharField(max_length=20, null=True, verbose_name='Телефон')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Название лекарства')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Лекарство',
                'verbose_name_plural': 'Лекарства',
            },
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True, verbose_name='Имя питомца')),
                ('species', models.CharField(max_length=50, null=True, verbose_name='Вид')),
                ('breed', models.CharField(blank=True, max_length=50, null=True, verbose_name='Порода')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('owner', models.ForeignKey(limit_choices_to={'is_staff': False}, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Питомец',
                'verbose_name_plural': 'Питомцы',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Название болезни')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('medicines', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diseases', to='pages.medicine')),
            ],
            options={
                'verbose_name': 'Болезнь',
                'verbose_name_plural': 'Болезни',
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('createDate', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата постановки')),
                ('disease', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.disease', verbose_name='Название болезни')),
                ('pet', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.pet', verbose_name='Питомец')),
                ('veterinarian', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='veterinarian_diagnoses', to=settings.AUTH_USER_MODEL, verbose_name='Ветеринар')),
            ],
            options={
                'verbose_name': 'Диагноз',
                'verbose_name_plural': 'Диагнозы',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createDate', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата отправки заявки')),
                ('date', models.DateTimeField(null=True, verbose_name='Дата и время приема')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Заметки')),
                ('is_processed', models.BooleanField(default=False, verbose_name='Заявка рассмотрена')),
                ('owner', models.ForeignKey(limit_choices_to={'is_staff': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_appointments', to=settings.AUTH_USER_MODEL, verbose_name='Владелец питомца')),
                ('pet', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.pet', verbose_name='Питомец')),
                ('veterinarian', models.ForeignKey(limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='veterinarian_appointments', to=settings.AUTH_USER_MODEL, verbose_name='Ветеринар')),
            ],
            options={
                'verbose_name': 'Заявление',
                'verbose_name_plural': 'Заявления',
            },
        ),
    ]
